A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and 
backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.

Constraints:
1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.
_______________________________________________________________________________________________________________________________________

Understanding of the question:
- We need to check whether the given string s is a palindrome or not.
- Before doing that, we need to convert the string s to lower case and remove the special characters from it
- Return True if its palindrome or else return False
_________________________________________________________________________________________________________________________________

Brute Force method: By comparing with its reverse
 - Importing the libraries used for regular expression.
 - Convert the string to lower case by using python build in method - s.lower()
 - Then remove the regular expressions from the string
 - Then reverse the string and check if its same.
 
 import re
class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = s.lower()
        pattern = r'[^a-zA-Z0-9]'
        s = re.sub(pattern, '', s)
        s1 = s[::-1]
        if s==s1:
            return True
        return False
        
Time complexity is O(n), where n is the length of the input string.
Space Complexity is O(n), where n is the length of the modified string after removing non-alphanumeric characters.
_________________________________________________________________________________________________________________________________

Optimized Solution: By using two pointer approach

