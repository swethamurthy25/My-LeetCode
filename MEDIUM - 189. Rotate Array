Given an array, rotate the array to the right by k steps, where k is non-negative.
Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
____________________________________________________________________________________

Approach 1: Brute Force

The simplest approach is to rotate all the elements of the array in k steps by rotating the elements by 1 unit in each step.

Time complexity : O( nâˆ—k). All the numbers are shifted by one step(O (n)O(n)) k times(O (k)O ( k ) ).
Space complexity : O(1). No extra space is used.

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        
        # Brute Force
        n = len(nums)
        k = k % n
        
        for i in range(k):
            prev = nums[-1]
            for j in range(len(nums)):
                nums[j],prev = prev,nums[j]
