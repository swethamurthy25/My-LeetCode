Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the 
kth distinct element. You must solve it in O(n) time complexity.

Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

Example 2:
Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4

___________________________________________________________________

Understanding Scenario:

1. We are given a unsorted array and find the kth largest element , K value is given
2. For this we need to do definetly sort the array , so that it will be in order from smallest to highest then we can find the kth largest among that.
3. But if we sort , we will get O(n log n) complexity , and there is a condition we should solve this in O(n) complexity , so we cannot use sorting here. Then how do
we solve this?

_____________________________________________________________________

Approach 1: BRUTE FORCE:
The naive solution would be to sort an array first and then return kth element from the end, something like sorted(nums)[-k].
Can we do better than n log n?

TC will be O(n log n) and SC will be O(1)

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        
        nums.sort()
        n = len(nums)
        return nums[n-k]
________________________________________________________________________________________

Approach 2: HEAP

The idea is to init a heap "the smallest element first", and add all elements from the array into this heap one by one keeping the size of the heap 
always less or equal to k. That would results in a heap containing k largest elements of the array.We will stop adding to heap when we reach k value . 
The head of this heap is the result, i.e. the kth largest element of the array.

1. Initialize the minHeap to be empty.
2. For all elements in i , push the elements to heap until we exceed k value
3. if number of elements in heap > k: pop it out , or else continue adding untill we reach K
4. Return the top most element (kth largest)

Example: [3,2,1,5,6,4] k = 2
   1. Now first three element is pushed into heap (3,2,1) . By default heap will sort the values and keep min(1 here) on top.
   2. Since we exceeded k value , pop 1 out. Now we have 2 and 3 in heap
   3. Push 5 into heap. By default heap is sorted and min(2) will be on top
   4. Since we exceeded k value , pop 2 out
   5. Now we have only (3,5) in heap.
   6. Push 6 into heap , we exceeded k value so pop the min (3) out now
   7. We have only (5,6) now
   8. Push 4 into heap , we exceeded k value pop the min (4) out now.
   9. We are no more elements now , so top most (5) will be the result

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        
        # Using Heap
        minHeap = []
        for i in range(len(nums)):
            heapq.heappush(minHeap,nums[i])
            if len(minHeap) > k:
                heapq.heappop(minHeap)
        return heapq.heappop(minHeap)
        
We are not sorting here, we are converting the array to heap which takes O(n) complexity .
Poping each element from heap will cost o(log n) complexity , so we have to pop k times O(k log n)
Total complexity = O(k log n) , which is slightly better than sorting approach if the k value is relatively small

SC is O(n) since heap is sorting the elements by default

In Python there is a method nlargest in heapq library which has the O(k log n) time complexity and reduces the code to one line.

class Solution:
    def findKthLargest(self, nums, k):
        return heapq.nlargest(k, nums)[-1]

But we have a condition to solve in O(n), heap is an just another approach but this will not satify the complexity.
___________________________________________________________________________________________________

Approach 3: QUICK SELECT (Similar to Quick Sort)

Quickselect is a selection algorithm to find the k-th smallest element in an unordered list. The algorithm is similar to QuickSort. 
The difference is, instead of recurring for both sides (after finding pivot), it recurs only for the part that contains the k-th smallest element. 

This reduces the expected complexity from O(n log n) to O(n), with a worst-case of O(n^2).

1. When we have an unsorted array , pick the last element as pivot element
2. If index is the same as k, we have found the k-th smallest element and we return
3. If index of the partitioned element is more than k, then we recur for the left part
4. If index is less than k, then we recur for the right part.







