QUESTION:
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

****************************************************************************
Approach 1: Brute Force
Traditional brute force approach using two for loops , so time complexity will be O(n^2)

 # Brute force method
        max_profit = 0
        for i in range(len(prices) - 1):
            for j in range(i + 1, len(prices)):
                profit = prices[j] - prices[i]
                if profit > max_profit:
                    max_profit = profit
                    
        return max_profit
*********************************************************************************

Approach 2: One Pass (Max one loop)
 # Declare two variable - buy_price and max_profit
        # If any value is lesser than current buy_price , update the buy_price
        # Compare current max profit with profit just found now
        
        buy_price = prices[0]
        max_p = 0     
        
        for i in prices:
            if buy_price > i:
                buy_price = i
                continue
            max_p = max(max_p , i - buy_price)
        
        return max_p
                        
 Time - O(n)
 Space - O(1)
 ****************************************************************************
 
 Approach 3: Using Two pointer
 
 # Declare the left(buy),right pointer(sell) and mx_profit
        left_p = 0 
        right_p = 0
        max_profit = 0

        while right_p < len(prices):
            current_profit = prices[right_p] - prices[left_p]
            if prices[left_p] < prices[right_p]:
                max_profit = max(current_profit,max_profit)
            else:
                left_p = right_p
            right_p += 1
            
        return max_profit
        
 Time - O(n)
 Space - O(1)
 ****************************************************************************
