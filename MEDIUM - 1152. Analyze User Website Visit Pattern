You are given two string arrays username and website and an integer array timestamp. All the given arrays are of the same length and the tuple 
[username[i], website[i], timestamp[i]] indicates that the user username[i] visited the website website[i] at time timestamp[i].

A pattern is a list of three websites (not necessarily distinct).For example, ["home", "away", "love"], ["leetcode", "love", "leetcode"], and 
["luffy", "luffy", "luffy"] are all patterns.

The score of a pattern is the number of users that visited all the websites in the pattern in the same order they appeared in the pattern.

-For example, if the pattern is ["home", "away", "love"], the score is the number of users x such that x visited "home" then visited "away" and visited "love" after 
that.
-Similarly, if the pattern is ["leetcode", "love", "leetcode"], the score is the number of users x such that x visited "leetcode" then visited "love" and visited 
"leetcode" one more time after that.
-Also, if the pattern is ["luffy", "luffy", "luffy"], the score is the number of users x such that x visited "luffy" three different times at different timestamps.
-Return the pattern with the largest score. If there is more than one pattern with the same largest score, return the lexicographically smallest such pattern.

 Example 1:

Input: 
username = ["joe","joe","joe","james","james","james","james","mary","mary","mary"], 
timestamp = [1,2,3,4,5,6,7,8,9,10], 
website = ["home","about","career","home","cart","maps","home","home","about","career"]
Output: ["home","about","career"]
Explanation: The tuples in this example are:
["joe","home",1],["joe","about",2],["joe","career",3],["james","home",4],["james","cart",5],["james","maps",6],["james","home",7],["mary","home",8],["mary","about",9], and ["mary","career",10].
The pattern ("home", "about", "career") has score 2 (joe and mary).
The pattern ("home", "cart", "maps") has score 1 (james).
The pattern ("home", "cart", "home") has score 1 (james).
The pattern ("home", "maps", "home") has score 1 (james).
The pattern ("cart", "maps", "home") has score 1 (james).
The pattern ("home", "home", "home") has score 0 (no user visited home 3 times).

___________________________________________________________________________________

Understanding the given scenario:

1. What is input ? - We are given two string array (website and username) and one integer array (timestamp). All the 3 arrays are of same length .

2. The tuple [username[i], website[i], timestamp[i]] - Means the user[i] has visited the website[i] at timestamp[i]
    Example: Tom has visited "homepage" at 12pm
    
4. What we need to find here ? - Score of a pattern -  the number of users that visited all the websites in the pattern in the same order they appeared 
in the pattern.
   Example: if the pattern is ["home", "away", "love"] ----> User X has visited home first , then away and then visited love
   Example: if the pattern is ["leetcode", "love", "leetcode"] ---> User Y has visited leetcode first , then love and then visited leetcode for the second time
   Example: if the pattern is ["luffy", "luffy", "luffy"] ----> User Y has visited luffy at three different timestamps , may be at 1pm , 2pm and then 3pm 
   
5. What is the output ? --> Return the pattern with the largest score. If there is more than one pattern with the same largest score, return the lexicographically 
smallest such pattern.

__________________________________________________________________________________________________________________________________

Approach 1: Brute Force

1. Initialize the dictionary to get the (time, website) records per user 
2. Initialize the counter variable to keep track of the count - how many websites have the user visited?
3. Zip the three elements - username, website, and timestamp to form the tuple
4. For every user, the timestamp, and the website he visited are segregated. Also, increment the count by 1 for every pattern. The dict will have the 
username and the number of websites he visited.
5. Initialize a dictionary to count the three seq pattern (TSQ). Now sort the dictionary items by time.
6. If any 3-sequence appears multiple times for one user, it should be counted as only once to avoid duplicates -- Use hashset
7. Use three nested for loops to generate the patterns. 
8. If the patterns already exist in visited set, continue .. If not in the viisted set , increment the TSQ count by 1 and append that to the visited set.
9. Sort all 3-sequence count by using lambda function and return the pattern with highest score.

TC is O(n^3) since we using three nested for loops 
SC is O(n) since we using dictionary objects for storing the data

class Solution:
    def mostVisitedPattern(self, username: List[str], timestamp: List[int], website: List[str]) -> List[str]:
        
        #Brute Force Method
        dict = collections.defaultdict(list)
        count = collections.Counter()
        tuple = list(zip(username,timestamp,website))
        
        for username,timestamp,website in tuple:
            dict[username].append((timestamp,website))
            count[username] += 1
        
        TSQ = collections.defaultdict(int)
        for username,records in dict.items():
            records.sort()
            visited = set()
        
        #Use three nested for loops to generate the patterns
            for i in range(count[username]):
                for j in range(i+1,count[username]):
                    for k in range(j+1,count[username]):
                        patterns = (records[i][1],records[j][1],records[k][1])
                        
                        if patterns in visited:
                            continue
                        TSQ[patterns] += 1
                        visited.add(patterns)
                            
        result = sorted(TSQ.items(), reverse= True, key=lambda TSQ:(-TSQ[1], TSQ[0]))
        return result[-1][0]
                    
____________________________________________________________________________________________________________



