Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
___________________________________________________________________________________________________________

What did we understand from the question?

1. We need to find the sub array from the given nums and the sum of the sub array should be the largest (maximum)
2. The largest sum can be both positive or negative value
3. The sub array should be contiguous (continuous)
______________________________________________________________________________________________________________

Brute Force:

1. Starting from the first number , try to form the sub array with every other numbers and compute the sum
2. Declare two variable -- maxSum and CurrSum . CurrSum is used to compute the current sum  value of each subarray and maxSum is used to store the mx 
   value so far obatined.
3. Initialize the maxSum as nums[0] at the beginning. 
4. We require two for loops to iterate through the nums and compute the sum
5. Negative values in the arrays has no power and it can be ignored as we are concentrating only to get the max/largest sum.

TC is O(n^2) as we are using two for loops
SC is O(1) as there is no additional space required.

class Solution(object):
    def maxSubArray(self, nums):
        n = len(nums)
        maxSum = nums[0]
        for i in range(n):
            currSum = 0
            for j in range(i,n):
                currSum += nums[j]
                maxSum = max(maxSum , currSum)
        return maxSum
____________________________________________________________________________________________________________________________

Optimized Solution using Dynamic Programmin (Kadane's algorithm)

1. Initialize 2 integer variables. Set both of them equal to the first value in the array.
2. currSum will keep the running count of the current subarray we are focusing on.
3. maxSum will be our final return value. Continuously update it whenever we find a bigger subarray.
4. Iterate through the array, starting with the 2nd element (as we used the first element to initialize our variables). 
5. For each number, add it to the currentSubarray we are building. If currentSubarray becomes negative, we know it isn't worth keeping, so throw it away.
6. Simultaneously , we need to update the maxSubarray every time we find a new maximum.
7. Return the maxSum as output.

TC is O(n) where n is the length of the nums , so we need to iterate only once.
SC is O(1) as we are not using any additional space.

class Solution(object):
    def maxSubArray(self, nums):
        currSum = maxSum = nums[0]

        #for loop is starting from the 2nd element
        for i in nums[1:]:
            currSum = currSum + i
            currSum = max(i, currSum)
            maxSum = max(maxSum , currSum)
        return maxSum
_____________________________________________________________________________________________________

