Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's
such that j != i and nums[j] < nums[i]. Return the answer in an array.

Example 1:
Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).

Example 3:
Input: nums = [7,7,7,7]
Output: [0,0,0,0]

___________________________________________________________

Approach 1: Brute Force- Using two nested for loops

1. We iterate for entire length of nums: i
2. Then we compare each element i with every other element in nums apart from itself: j
3. We increment the count value for each number that was found in the array
4. We append the result for each element i in result and return the results as output

TC will be O(n^2) and SC will be O(n+n) # O(n) for nums[] and O(n) for res[]

class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        
        result = []
        for i in range(len(nums)):
            count=0
            for j in range(len(nums)):
                if j != i and nums[j] < nums[i]:
                    count += 1
            result.append(count)
        return result
______________________________________________________________

Approach 2: Use Sorting and dictionary

Example: nums = 8, 1, 2, 2, 3

1. We sort the list bcoz we don't want to keep traversing the list back and forth. After sorting, we get nums = 1, 2, 2, 3, 8
2. We traverse the sorted nums list. If we find unique element, add this unique element to the dictionary with index i and ignore the duplicates.
3. If duplicate element is encountered, we don't add it and don't update the value in dictionary.
4. After adding all unique elements to dictionary , we create output after doing O(1) lookup in dictionary for nums[i]

TC is O(nlogn) since we are using sorting and SC is O(n) since we are using dictionary

class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        
        sortedNums = sorted(nums)
        dict = {}
        result = []
        
        #Check for the unique value and add only that to dict with its index
        for i in range(len(sortedNums)):
            if sortedNums[i] not in dict:
                dict[sortedNums[i]] = i
        
        for i in nums:
            result.append(dict[i])
            
        return result
        
__________________________________________________

Approach 3:

class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        
        x = sorted(nums)
        return [x.index(i) for i in nums]
        
_________________________________________________________________________


