Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1
______________________________________________________________________

Understanding the Scenario:

1. This is a common scenario at an office where given the start and end times for meetings to happen throughout the day, we need to setup and allocate the room 
numbers to different teams based on the availability.
2. At the same time, we don't really want to use too many rooms unless absolutely necessary. 


Brute Force or Straight forward approach:
Let's approach this problem from the perspective of a group of people who want to hold a meeting and have not been allocated a room yet. What would they do?
This group would essentially go from one room to another and check if any meeting room is free. If they find a room that is indeed free, they would start their meeting 
in that room. Otherwise, they would wait for a room to be free. As soon as the room frees up, they would occupy it. In the worst case we can assign a new room to all 
of the meetings but that is not really optimal solution.

Dry Run of Program:
Input: intervals = [ (1, 10), (2, 7), (3, 19), (8, 12), (10, 20), (11, 30) ]
The meeting intervals are already sorted by the start time.

Step 1: 
Consider the first three meetings (1,10),(2,7),(3,19). 
First meeting will start at 1am and end at 10am , we can allocate a new meeting room (M1)
Second meeting will start at 2am and end at 7am , we cannot use the existing rooom M1 because at 2am , it will not be free, so allocate M2
Third meeting will start at 3am and end at 19am , we cannot use M1 & M2 , so allocate new room M3

Current status:
M1 - (1,10)
M2 - (2,7)
M3 - (3,19)

Step 2:
Consider 4th and 5th meeting (8, 12), (10, 20)
Second meeting at M2 will be over by 7am , so we can allocate that room to (8,12) - M2
First meeting at M1 will be over by 10 am , so that the next meeting (10,20) can be held there - M1

Current status:
M1 - (10,20)
M2 - (8,12)
M3 - (3,19)

Step 3:
We are left with (11,30)
All the rooms are occupied , so allocate new room (M4) to (11,30)
We would require 4 new rooms to handle all these given interval of meetings.

Final Status:
M1 - (10,20)
M2 - (8,12)
M3 - (3,19)
M4 - (11,30)

_______________________________________________________________________

How to improve this? - Implement Priority Queue using min-heap data structure

Why do we need to sort? - When we sort by starting time , we know which intervals will happen first and which is the last. Based on that we can decide on rooms.

Instead of manually iterating on every room that's been allocated and checking if the room is available or not, we can keep all the rooms in a min heap 
where the key for the min heap would be the ending time of meeting.

So, every time we want to check if any room is free or not, simply check the topmost element of the min heap as that would be the room that would get free 
the earliest out of all the other rooms currently occupied.

If the room we extracted from the top of the min heap isn't free, then no other room is free. So, we can save time here and simply allocate a new room.


Code Explanation:
Example: [(0,30),(0,15),(15,20),(5,10),(21,25)]

1. Sort the intervals by start time. This will give O(n log n) complexity
   
   intervals.sort()
   [(0,15),(0,30),(5,10),(15,20),(21,25)]
   
2. Initialize the meeting room to 1 (meeting_room = 1) , due to this constraint in the question : 1 <= intervals.length <= 104
   We will have atleast one interval and we need atleast one meeting room by default , so start with 1
   
3. Initialize the heap with end of meeting 
    
    heap = [intervals[0][1]]    # interval[0] is (0,15) and interval[0][1] is 15 in this case

4. Use for loop to iterate starting from intervals[1] until end. Heap will sort the values and keep the min value on top by default.
   So, check if heap[0] <= start, if true pop it out . Else , push the next end value to the heap . Then find the max of meeting room and len(heap)
   
   for start,end in intervals[1:]:
        if heap[0] <= start:
            heapq.heappop(heap)
        heapq.heappush(heap,end)
        meeting_room = max(meeting_room,len(heap))
        
    return meeting_rooms
    
 TC of sorting - O(n log n) and min heap is O(log n)
 Total TC is O(n log n)
 In worst case , we need to add N operations to the heap and need N meeting rooms.
 
 SC is O(n) because we construct the min-heap and that can contain N elements in the worst case.
 
 __________________________________________________________
 
 class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        
        intervals.sort()
        meeting_rooms = 1
        
        heap = [intervals[0][1]]
        for start,end in intervals[1:]:
            if heap[0] <= start:
                heapq.heappop(heap)
            heapq.heappush(heap,end)
            meeting_rooms = max(meeting_rooms,len(heap))
            
        return meeting_rooms
    
    _______________________________________________________________________
 
 
 
    
        
        
        
        
        
