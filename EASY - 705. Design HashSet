Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

void add(key) Inserts the value key into the HashSet.
bool contains(key) Returns whether the value key exists in the HashSet or not.
void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.

Example 1:
Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)

Constraints:
0 <= key <= 106
At most 104 calls will be made to add, remove, and contains.
_____________________________________________________________________________________________________

Understanding the Scenario:

1. Hash Table is a data structure which organizes data using hash functions in order to support quick insertion and search.
2. The key idea of Hash Table is to use a hash function to map keys to buckets.When we insert a new key, the hash function will decide which bucket the key 
should be assigned and the key will be stored in that corresponding bucket;
3. When we want to search for a key, the hash table will use the same hash function to find the corresponding bucket and search only in the specific bucket.

Why hashset?
When we take any list/array [1,5,65,32,79,16] and when we need to find an element say 79 in array. We need to traverse through all elements,we need to check if that 
element is 79 or not. So, the lookup time will be O(n)

But when we use hashset:
[1,5,65,32,79,16] - If we need to check if 79 exist , go to that specific bucket 9 and search for the value. So,the lookup time will be constant ie O(1)

Number%10    Bucket
________________________________

0             []
1             [1]
2             [32]
3             []
4             []
5             [5,65]
6             [16]
7             []
8             []
9             [79]

**************************************************************

When we want to implement hashset , we need to take care of two important things or we need to address two things:
1. hash function: The hash function is the most important component of a hash table which is used to map the key to a specific bucket.Ideally, 
each unique value should have a unique hash value.
2. Collision:  when two pieces of data in a hash table share the same hash value, the collision occurs.

___________________________________________________________________________________________________

Approach 1: Brute Force

We can design the hashset with the build-in hash libraries. It has following functionalities:
add (value)
remove (value)
contains (value)

class MyHashSet:

    def __init__(self):
        self.hashSet = set([])
        
    def add(self, key: int) -> None:
        self.hashSet.add(key)   

    def remove(self, key: int) -> None:
        if key in self.hashSet:
            self.hashSet.remove(key)
        
    def contains(self, key: int) -> bool:
        if key in self.hashSet:
            return True
        return False
        
_____________________________________________________________________________

Approach 2: Without using inbuild libraries

TC is O(1) and SC is O(n)

Intialization of bucket size is very important:
When designing a hash-based data structure, it's important to define the number of buckets in advance. This fixed size allows for efficient storage and retrieval of data. 
By choosing an appropriate size, we can balance memory usage and performance. In our case , we have choosen a fixed size of 10,000 buckets.

Perform hashing function for each operation:
Hashing functions are used to transform input data into a numerical value, which serves as an index to determine the location or bucket where the data should be stored. 
The purpose of the hashing function is to distribute the data evenly across the available buckets. This helps achieve a good distribution and reduces the chances of 
collisions (multiple items being assigned to the same bucket).By performing the hashing function for each operation (such as inserting, retrieving, or deleting data), 
we can determine the appropriate bucket index for the data and perform the necessary operations efficiently. 

Solution:
1. Initialize the fixed size of bucket say for example 10,000 in our case. (any range within the constraint limit)
2. And then perform the hashing function (bucketIndx) for each operation 
3. Add: The hashset contains only the unique values, so if the key or hashing value is not in the bucket , add/insert the key
4. Remove: if the key or hashing value exist in the bucket , remove the key
5. Contains: if the key or hashing value exist in the bucket , return the key

class MyHashSet:

    def __init__(self):
        self.buckets = [[]] * 10000
        
    def add(self, key: int) -> None:
        bucketIndx = key % 10000
        if key not in self.buckets[bucketIndx]:
            self.buckets[bucketIndx].append(key)

    def remove(self, key: int) -> None:
        bucketIndx = key % 10000
        if key in self.buckets[bucketIndx]:
            self.buckets[bucketIndx].remove(key)
            
    def contains(self, key: int) -> bool:
        bucketIndx = key % 10000
        return key in self.buckets[bucketIndx]
        
