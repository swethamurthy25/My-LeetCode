You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.
You are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:

An integer x - Record a new score of x.
'+' - Record a new score that is the sum of the previous two scores.
'D' - Record a new score that is the double of the previous score.
'C' - Invalidate the previous score, removing it from the record.

Return the sum of all the scores on the record after applying all the operations.
The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.

Input: ops = ["5","2","C","D","+"]
Output: 30
Explanation:
"5" - Add 5 to the record, record is now [5].
"2" - Add 2 to the record, record is now [5, 2].
"C" - Invalidate and remove the previous score, record is now [5].
"D" - Add 2 * 5 = 10 to the record, record is now [5, 10].
"+" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].
The total sum is 5 + 10 + 15 = 30.

Input: ops = ["5","-2","4","C","D","9","+","+"]
Output: 27
Explanation:
"5" - Add 5 to the record, record is now [5].
"-2" - Add -2 to the record, record is now [5, -2].
"4" - Add 4 to the record, record is now [5, -2, 4].
"C" - Invalidate and remove the previous score, record is now [5, -2].
"D" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].
"9" - Add 9 to the record, record is now [5, -2, -4, 9].
"+" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].
"+" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].
The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.

Input: ops = ["1","C"]
Output: 0
Explanation:
"1" - Add 1 to the record, record is now [1].
"C" - Invalidate and remove the previous score, record is now [].
Since the record is empty, the total sum is 0.

Constraints:
1 <= operations.length <= 1000
operations[i] is "C", "D", "+", or a string representing an integer in the range [-3 * 104, 3 * 104].
For operation "+", there will always be at least two previous scores on the record.
For operations "C" and "D", there will always be at least one previous score on the record.
_____________________________________________________________________________________________________________________

Understanding:
- We are given with a string of operations and we need to follow certain rules for each symbol when we iterate through the array.
- Atlast, when all operations are done , return the sum of the array as a result.
- Every element in array are string , so we cannot perform any operations on string , so we need to convert them to int and then do the operations.
________________________________________________________________________________________

Which Datastructure we should choose now? 
-- As we iterate through the array , We are going to perform the operations only on the previous digit or last two prebious digits of the array 
- we dont need to access the rest of the elements.
-- So we can use stack here since it deals with LIFO (Last In First Out)
_________________________________________________________________________________________

Solution:
- Create an empty stack to store the resultant elements. Stack can be accessed as same as list.
- Now iterate through each element using a for loop and define the conditions for each symbol.
- When we encounter "C" , we should remove the previous score , so stack.pop() is used to do this.
- When we encounter "D", we need to double the previous score , and append it to the stack again.
- When we encounter "+" , we need to add the previous two score, and append it to the stack again.
- When we encounter anything other than symbols (numbers) , we need to convert that char to int and then simply add it to the stack.
- When iteration is completed, return the sum(stack) as the final output.

class Solution:
    def calPoints(self, operations: List[str]) -> int:
        stack = []
        for i in operations:
            if i == 'C':
                stack.pop()
            elif i == 'D':
                stack.append(stack[-1]*2)
            elif i == '+':
                stack.append(stack[-1]+stack[-2])
            else:
                stack.append(int(i))
        return sum(stack)

Time complexity is O(n) where n is the length of the operations array.
Space complexity is O(n) bcz the size of the stack will be the same as the input array.
_______________________________________________________________________________________________________














