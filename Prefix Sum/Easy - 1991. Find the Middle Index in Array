Given a 0-indexed integer array nums, find the leftmost middleIndex (i.e., the smallest amongst all the possible ones).

A middleIndex is an index where nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1].

If middleIndex == 0, the left side sum is considered to be 0. Similarly, if middleIndex == nums.length - 1, the right side sum is considered to be 0.

Return the leftmost middleIndex that satisfies the condition, or -1 if there is no such index.

Input: nums = [1,7,3,6,5,6]
Output: 3
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11

Input: nums = [1,2,3]
Output: -1
There is no index that satisfies the conditions in the problem statement.
________________________________________________________________________________________________

NOTE: THIS QUESTION IS SAME AS 724. Find Pivot Index

Brute Force:

We need to quickly compute the sum of values to the left and the right of every index.
Start from index 0 and iterate through every index to check the balance between left and the right
If the balance is equal , return that index as a output 
Else, return -1 as the result.

______________________________________________________________________________________

Using Prefix Sum Concept:

1. Let the left side be 0 and right side will have the total weight (sum)

Example:nums = [1,7,3,6,5,6] 
        Left = 0
        Right = 28
2. For every iteration , take away the value (i) and subtract it from right (total sum)
3. Check if the balance is met , If No update the left with the value i 
Example: nums[0] = 1
         Right = 28 - 1 => Right will become 27 now
         Check if balance is met , if no then add that value to left
         Left = 1
         Now go to next index
         
4. This continues until the balance is met and return that index as pivot
5. If the balance is not met , return -1
Example: nums[1] = 7
         Right = 27 - 7 => Right will become 20 now
         Check if balance is met , if no then add that value to left
         Left = 1 + 7 = 8
         
         nums[2] = 3
         Right = 20 - 3 => Right will become 17 now
         Check if balance is met , if no then add that value to left
         Left = 8 + 3 = 11
         
         nums[3] = 6
         Right = 17 - 6 => Right will become 11 now
         Check if balance is met , if YES return the index value as pivot

# Time Complexity : O(n)
# Space Complexity : O(1)

 class Solution(object):
    def findMiddleIndex(self, nums):
        left = 0
        right = sum(nums)
        for index,value in enumerate(nums):
            right -= value
            if left == right:
                return index
            left += value
        return -1
        
_____________________________________________________________________________________________________
