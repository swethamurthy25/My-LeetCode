Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).Return the running sum of nums.

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
___________________________________________________________________________________________________________

What we understood from question?

We need to calculate the sum of 0 to ith element for every iteration
This is considered to be a running sum and should be displayed as output. 
We can use prefix sum concept for this question.
___________________________________________________________________________________________________________________

Logic:

1. Initialize sum as 0
2. Iterate through every element in nums and calculate sum
3. Sum = sum + nums[i] --> already existing sum + current number
4. Now assign that sum value to nums[i]
5. Return the nums array as output

TC is O(N) and SC is O(1)

class Solution(object):
    def runningSum(self, nums):
        sum = 0
        for i in range(len(nums)):
            sum = sum + nums[i]
            nums[i] = sum
        return nums
_____________________________________________________________________________________________________

