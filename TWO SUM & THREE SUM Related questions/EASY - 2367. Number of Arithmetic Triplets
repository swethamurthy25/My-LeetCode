You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions 
are met: Return the number of unique arithmetic triplets.

Conditions:
i < j < k,
nums[j] - nums[i] == diff, and
nums[k] - nums[j] == diff.

Things to note down:
1. Input array is in strictly increasing order , means its sorted from lowest to highest , so sorting will not be required
2. The integer difference should only be positive
3. Output should be int ( number of unique triplets )

Example 1:

Input: nums = [0,1,4,6,7,10], diff = 3
Output: 2
Explanation:
(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.
(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. 

Example 2:
Input: nums = [4,5,6,7,8,9], diff = 2
Output: 2
Explanation:
(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.
(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.

_____________________________________________________________________________________

Approach 1: Brute Force

1. Search for all possible combinations within nums. Use a nested for-loops for nums[i] , nums[j] and nums[k]
2. Make sure the triplet should satisfy all the three conditions, we donot need to worry about i<j<k , as this is an sorted array so obviously this condition will
be satisfied.
3. We need to return the number of such triplets means the "count" 

TC is O(n^3) and SC is O(n)

# Brute Force - O(n^3) and O(n)
        count = 0
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                for k in range(j+1,len(nums)):
                    a,b,c = nums[i],nums[j],nums[k]
                    if b-a == diff and c-b == diff:
                        count += 1
        return count
________________________________________________________________________________________________

Approach 2 - Using Largest value of triplet to find other two values

1. Initialize the count to store the number of triplets
2. We are given the conditions - arr[j] - arr[i] = diff  && arr[k] - arr[j] = diff
   So, from arr[k] - arr[j] = diff, we get:
   arr[j] = arr[k] - diff  ---> equation 1
   This can be written as nums[i] + diff = nums[j]
   
   Now, if we substitute equation 1 in arr[j] - arr[i] = diff:
   arr[k] - diff - arr[i] = diff
   arr[i] = arr[k] - diff - diff
   arr[i] = arr[k] - 2*diff
   This can be written as nums[i] + 2*diff = nums[k]
   
3. By using these values , we can find the triplets and return the count

TC is O(n) and SC is O(n)

 # Optimized Approach
        count = 0
        n = len(nums)
        for i in range(n):
            if nums[i] + diff in nums and nums[i] + 2 * diff in nums:
                count += 1
        
        return count
        
 ___________________________________________________________
 
Approach 3 - Using Hashset

# Using hash set
unique_nums = set(nums)
return sum(num+diff  in unique_nums and num+2*diff in unique_nums for num in nums)
    
