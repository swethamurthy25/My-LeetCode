Given an array nums of integers and integer k, return the maximum sum such that there exists i < j with nums[i] + nums[j] = sum and sum < k. 
If no i, j exist satisfying this equation, return -1.

Things to note down:
1. Do summation of i+j , if summation of i+j is less than k , append it to array 
2. Find the max of array
3. If max not found , return -1

Input: nums = [34,23,1,24,75,33,54,8], k = 60
Output: 58
Explanation: We can use 34 and 24 to sum 58 which is less than 60.

Input: nums = [10,20,30], k = 15
Output: -1
Explanation: In this case it is not possible to get a pair sum less that 15.

____________________________________________

Approach 1: Brute Force using two for loops with TC O(n^2) and SC O(n)

#Brute Force - O(n^2) and O(1)
        result = -1
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                summation = nums[i]+nums[j]
                if summation < k:
                    result = max(result,summation)
        return result
        

Approach 2: Using sorting and two pointer approach
TC will be O(n log n) since we are sorting the array and SC will be O(n)

 #Two pointer with sorting - O(n log n) and O(n)
        nums.sort()
        result = -1
        n = len(nums)
        i = 0
        j = n-1
        
        while i < j:
            summation = nums[i]+nums[j]
            if summation < k:
                result = max(result,summation)
                i += 1
            else:
                j -= 1
        return result 
    
        
 Approach 3: Using Sorting and Binary Search 
 TC will be O(n log n) to sort the array and do the binary search for each element.
 SC will be O(n)
 
 ____________________________________________________________
