Given an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition 
nums[i] + nums[j] + nums[k] < target.

Example 1:
Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]

Example 2:
Input: nums = [], target = 0
Output: 0

Example 3:
Input: nums = [0], target = 0
Output: 0

Things to note down:
1. Find sum of i , j , k and check if the sum is less than target
2. Input array will contain both positive and negative numbers

_________________________________________________________________________________________-

Approach 1: Brute Force 

1. Using three nested for loop with TC O(n^3) and SC O(n)

class Solution:
    def threeSumSmaller(self, nums: List[int], target: int) -> int:
        
        # Brute Force
        count = 0
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                for k in range(j+1,len(nums)):
                    summation = nums[i]+nums[j]+nums[k]
                    if summation < target:
                        count += 1
        return count
__________________________________________________________________________________________

Approach 2: 
