Given the root of a binary tree, return the postorder traversal of its nodes' values.

Input: root = [1,null,2,3]
Output: [3,2,1]

Input: root = []
Output: []

Input: root = [1]
Output: [1]

_________________________________________________________________________________________

Recursive Method: [left,right,root]

TC is O(N) and SC is O(N)

class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
        if root is None:
            return []
        return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]
__________________________________________

ITERATIVE METHOD USING STACK:

class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
        if root is None: return []
        
        stack = []
        stack.append(root)
        
        result = []
        
        while stack:
            root = stack.pop()
            result.insert(0,root.val)
            
            if root.left is not None: stack.append(root.left)
            if root.right is not None: stack.append(root.right)
        return result
