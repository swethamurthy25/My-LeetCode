BINARY SEARCH 

Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by using the divide and conquer method by repeatedly dividing in half 
the portion of the list that could contain the item, until you've narrowed down the possible locations to just one. 

Note:
A binary search is only possible with an ordered set of data; if the data is randomly arranged, then a linear search would yield results all the time while a 
binary search would probably be stuck in an infinite loop.


How to use binary search:
1. We start from the most basic and elementary template.
2. First, we define the search space using two boundary indexes, left and right, all possible indexes are within the inclusive range [left, right]. These are nothing but two
   pointers.
3. We shall continue searching over the search space as long as it is not empty. So, a general way is to use a while loop with the condition left <= right, 
   so we can break out of this loop if we empty the range or trigger other conditions.
4. The next step is to find the 'pivot point', the middle index that divides the search space into two halves.
5. We need to compare the value at the middle index nums[mid] with target, the purpose of this step is to cut one half that is guaranteed not to contain target.
   - If nums[mid] = target, it means we find target, and the job is done! We can break the loop by returning mid.
   - If nums[mid] < target, combined with the array is sorted, we know that all values in the left half are smaller than target, so we can safely cut this half by 
     letting left = mid + 1.
   - If nums[mid] > target, it means all values in the right half are larger than target and can be cut safely!
6. Like wise , we narrow down to the target and return its index as output
7. Else, We finish the loop without finding target, return -1.

TIME COMPLEXITY: O(N LOG N)
nums is divided into half each time. In the worst-case scenario, we need to cut nums until the range has no element, and it takes logarithmic time to 
reach this break condition.

SPACE COMPLEXITY: O(1)
During the loop, we only need to record three indexes, left, right, and mid, they take constant space.
_________________________________________________________________________________________________________________________________________
