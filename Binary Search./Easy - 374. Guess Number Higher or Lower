We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.
Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

You call a pre-defined API int guess(int num), which returns three possible results:

-1: Your guess is higher than the number I picked (i.e. num > pick).
1: Your guess is lower than the number I picked (i.e. num < pick).
0: your guess is equal to the number I picked (i.e. num == pick).

Return the number that I picked.

Input: n = 10, pick = 6
Output: 6

Input: n = 2, pick = 1
Output: 1
_______________________________________________________________________________________________

What we understood from question?

1. A number will be picked from 1 to n, we have to guess correctly which number has been picked.
2. If the guess is higher than the number that is picked, decrement by 1
3. If the guess is lower than the number that is picked, increment by 1
4. If the guess is correct or equal to the number that is picked , 0 - do nothing just return the number as output
5. Guess the correct number that has been picked and return as output
__________________________________________________________________________________

Approach 1: Brute Force

1. We check every number from 1 to n-1 and pass it to the guessguess function. 
2. The number for which a 0 is returned is the required answer.

Example: n = 10 and they have picked the number 6
The numbers will be 1,2,3,4,5,6,7,8,9,10
If our guess is 5 , eliminate 5 and check all other numbers from next iteration
The numbers will be 1,2,3,4,5,6,7,8,9,10
If the next guess i 7 , eliminate 7 and check all other remaining numbers from next iteration.
This continues until we guess the correct number

TC is O(n) - We scan all the numbers from 1 to n.
SC is O(1) - constant space

# The guess API is already defined for you.
# @param num, your guess
# @return -1 if num is higher than the picked number
#          1 if num is lower than the picked number
#          otherwise return 0
# def guess(num: int) -> int:

class Solution:
    def guessNumber(self, n: int) -> int:
        
        for i in range(n+1):
            if (guess(i)==0):
                return i
        return n
___________________________________________________________________________

Approach 2: Optimized using Binary Search algorithm

We start with the mid number and we pass that number to the guessguess function. 
If it returns a -1, it implies that the guessed number is larger than the required one.
If it returns a +1 , it implies that the guessed number is lower than the required one.

Why we need to use Binary Search here ? 
Instead of checking every number from 1-n , we can guess the mid value and if the number is not found before the mid , we can eliminate all numbers before mid,
so in one go , a chunk of numbers were eliminated and out approach narrows down towards the output.

TC is O(log n) - since binary search is used.
SC is O(1) - no extra space used.

Example: n= 10 and pick = 6

1. Initialize low as 1 and high as n 
2. While low <= high: find the mid value = (high+low)//2
    n = 1,2,3,4,5,6,7,8,9,10
    mid = (1+10)//2 = 5
    
3. Initialize the result variable and pass the mid value to the guess function. Here mid value is considered as the number we guess.

4. If res == 0, return the mid value as output
5. if res > 0: low = mid+1 (if pick is greater than guessed number (mid))
   Here number we guessed(mid) is 5 , but the pick (6) > guess (5)
   so res > 0 , we need to move the low to the mid+1 --> which means the number that is picked is in the second half of n, so we can eleminate the first half of n.
   n = 6,7,8,9,10
   
6. Again calculate the mid value of n = 6,7,8,9,10 (mid = 8). 
7. If res < 0: high = mid-1 (if pick(6) lesser than the guessed number(mid=8))
   Here number we guessed(mid) is 8 , but the pick (6) < guess (8)
   so res < 0, we need to move the high to mid-1
   n = 6,7
   
8. Again find the mid value (mid=6) , where res == 0 , return as output

class Solution:
    def guessNumber(self, n: int) -> int:
        
        low,high = 1,n
        while low <= high:
            mid = (high+low)//2
            result = guess(mid)
            if result == 0: return mid
            elif result > 0:
                low = mid+1
            elif result < 0:
                high = mid-1
                
__________________________________________________________________________________________-
