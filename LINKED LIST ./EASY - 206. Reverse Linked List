Given the head of a singly linked list, reverse the list, and return the reversed list.

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Input: head = [1,2]
Output: [2,1]

Constraints:
The number of nodes in the list is in the range [0, 5000].
-5000 <= Node.val <= 5000

Follow-up: A linked list can be reversed either iteratively or recursively. Could you implement both?
_________________________________________________________________________________________________________________

Iterative Approach:
Assume that we have linked list 1 → 2 → 3 → Ø, we would like to change it to Ø ← 1 ← 2 ← 3.

-- First, initialize the curr node to the head and the prev node to None (null).
-- Use a while loop and travel until the current node exists.
-- In order to reverse the linked list, the first node (1 here) should point to null (prev). Before breaking the reference between 1 and 2,
   we need to store curr.next(2 here) in some temp variable.  So, first initialize temp = curr. next 
-- Now point curr. next to null (prev) ==> curr.next = prev
-- Now 1 will become prev, so prev = curr
-- Finally, curr node should be pointing to temp, ==> curr = temp
-- This iteration continues until the curr reaches the last node.
-- Then return the prev

Reference Video: 
https://www.youtube.com/watch?v=W1BLGgWZhK8
https://www.youtube.com/watch?v=G0_I-ZF0S38

TC is O(n) and SC is O(1)

class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        #Iterative Approach - TC is O(N) and SC is O(1)
        curr = head
        prev = None
        while curr:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        return prev
__________________________________________________________________________________________________________________________

Recursive Approach:
The recursive version is slightly trickier and the key is to work backwards.
In the recursive approach, we are just going to change the reference/direction of the linked list nodes.

-- First, check if the head exists, if the head does not exist simply return None (null)
-- Assign a variable newHead to head
-- If the head. next exist, reverseList method is called recursively and We want nk+1’s next node to point to nk. (example:n1 → … → nk-1 → nk → nk+1 ← … ← nm)
-- so, head.next.next = head
-- In the else part, if head.next is None just return the head Node

TC is O(n) and SC is O(n) - The extra space comes from implicit stack space due to recursion. The recursion could go up to n levels deep.

lass Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        #Recursive approach - TC is O(n) and SC is O(n)
        if not head:
            return None
        newHead = head
        if head.next:
            newHead = self.reverseList(head.next)
            head.next.next = head
        head.next = None
        return newHead

Dry RUN;
Example: head = [1] and output = [1]
-- Here the head exists so the newHead will point to head
-- But we don't have head.next in the given input or head.next is None, so the else part will be executed and just the newHead which is 1 will be returned as output.

Example: head = [1,2,3] and output = [3,2,1]
-- Here the head exists so the newHead will point to the head ie is 1
-- head.next also exist so the first part of the code (if part) will be executed.
-- head.next is recursively called and it is assigned to newHead (now 2 will be pointing to newHead)
-- Then head.next.next (ie 3 here) will point to head (ie is 1), now the linked list will become 3-->1->2

In the second iteration, the steps continues, 
-- 3 will become head , head.next is recursively called and it is assigned to newHead (now 1 will be pointing to newHead)
-- Then head.next.next (ie 2 here) will point to head (ie is 3), now the linked list will become 3-->2-->1
-- Now return the newHead as output
_______________________________________________________________________________________________________________________________________________



