Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

Example 1:
Input: head = [1,1,2]
Output: [1,2]

Example 2:
Input: head = [1,1,2,3,3]
Output: [1,2,3]

Constraints:
The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.
_______________________________________________________________________________________________________________________________________

Optimized Solution:
-- The given linked list is already sorted, so we do not need to sort anything here.
-- We just need to traverse through the list and check only for the duplicates/repeated elements and remove those from the list

-- Set curr to the head and iterate till curr and curr.next is not None
-- If curr node and curr.next have the same value then just skip that node and set curr.next = curr.next.next 
-- Else curr = curr.next and just return the head.

Tc is O(n) since we are traversing the entire linked list once 
SC is O(1)

class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        #Brute Force - Just compare the element with its next element to check for duplicates
        curr = head
        while curr and curr.next:
            if curr.val == curr.next.val:
                curr.next = curr.next.next
            else:
                curr = curr.next
        return head
_____________________________________________________________________________________________________________________________________

