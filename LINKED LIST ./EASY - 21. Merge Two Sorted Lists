You are given the heads of two sorted linked lists list 1 and list 2.
Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Input: list1 = [], list2 = []
Output: []

Input: list1 = [], list2 = [0]
Output: [0]

Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.
_________________________________________________________________________________________________

Recursive approach:
TC is o(n+m) because we have two lists so the length of m + n
SC is O(n+m)

Covering the edge cases:
-- If the list1 is empty, simply return the list2 as output
-- If the list2 is empty, simply return the list1 as output
-- If both the list1 and list2 are empty, simply return [] as output

-- Now check if list1.val is lesser than list2.val, if true the mergeTwoLists method is called recursively and list1.val is added to the output
-- In the else part, the mergeTwoLists method is called recursively and list2.val is added to the output
-- Return the list

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if list1 is None: return list2
        if list2 is None: return list1
        if list1 and list2 is None: return []

        if list1.val < list2.val:
            list1.next = self.mergeTwoLists(list1.next,list2)
            return list1
        else:
            list2.next = self.mergeTwoLists(list1,list2.next)
            return list2
__________________________________________________________________________________________________________

Iterative Approach:
TC will be O(n+m) and SC will be O(1) constant space

Covering the edge cases:
-- If the list1 is empty, simply return the list2 as output
-- If the list2 is empty, simply return the list1 as output
-- If both the list1 and list2 are empty, simply return [] as output

-- Create a dummy node and make it a current node and assign it to the first node of the linked list.
-- Check which element has the lesser value list1.val or list2.Val 
-- If list1.val has a lesser value, update the curr. next with list1 and update the pointer of list1 to the next element
-- In the else part, If list2.val has a lesser value, update the curr. next with list2 and update the pointer of list2 to the next element
-- In every iteration, update the currNode to its next element
-- During this iteration , if any of the list is completed , combine the remaining elements of the other list to the currNode.
-- Return the dummy. next as output

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        #Iterative approach
        if list1 is None: return list2
        if list2 is None: return list1
        if list1 and list2 is None: return []

        # Create a dummy node
        currNode = dummy = ListNode(0)
        while list1 and list2:
            if list1.val < list2.val:
                currNode.next = list1
                list1 = list1.next 
            else:
                currNode.next = list2
                list2 = list2.next
            currNode = currNode.next
        #if one of the lists is completed, combine the remaining to the end of the result
        if list1: currNode.next = list1   
        if list2: currNode.next = list2
        return dummy.next
____________________________________________________________________________________________________________

