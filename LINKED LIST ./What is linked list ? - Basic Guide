What is linked list ?
• Linked list is an linear data structure, which consists of a group of nodes in a sequence [OR]
• Linked list stores data in linear form

But Array also stores linear data, then what's the difference?
• In array we have to first define the size of the Array.
• And each bit has it's memory address, where 1 bit size = 4, therefore 8 bit = 8 * 4 = 32 bit.
  Example: Array size = 8
           Array Elements = [1,2,3,4,5,6,7,8]
           
• But linked list is dynamic, we don't have to define it's size.
• In linked list we can add element as many as we want. But, in array size is fixed. So, to add new element we have to create a new array!
• Stack and Queue's can be easily implemented in linked list. 

Disadvantages:
• More memory usage due to address pointer.
• No reverse traversal in singly linked list
• No random access possible. If we want to access any node , we have to start from head and then traverse through all nodes to reach the specific node.

Types of Linked List:
There are 3 type's of linked list:-

• Singly-linked list:
  - linked list in which each node points to the next node and the last node points to null
  - Each node in a singly-linked list contains not only the value but also a reference field to link to the next node. By this way, 
    the singly-linked list organizes all the nodes in a sequence.
  - We will use the head node (the first node) to represent the whole list.
  
• Doubly-linked list: 
  linked list in which each node has two pointers, p and n, such that p points to the previous node and n points to the next node; 
  the last node's n pointer points to null

• Circular-linked list:
  linked list in which each node points to the next node and the last node points back to the first node
 
 
TIME COMPLEXITY :-
Access: O(n)
Search: O(n)
Insert: O(1)
Remove: O(1)
  
***********************************************************************************************************************
Singly Linked List:

• Each node in linked list contain two fields - data field and the reference field. Data field stores the data and reference field stores the address of the next node 
  in the list.
• HEAD --> The first node of every list is called head which marks the beginning of the list.
• TAIL --> The last node of the list which marks the end.



  



