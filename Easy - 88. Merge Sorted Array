You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 
respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements 
are set to 0 and should be ignored. nums2 has a length of n.

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
_______________________________________________________________________________________________________________________

What did we understand from question?

1. We are given with two arrays nums1 and nums2 , their length are m and n
2. Array is in non-decreasing order , means that no element is less than the element before it.
3. We need to merge the two arrays and the merged array should be in sorted order.
4. We should not create new array to store the merged elements , rather we need to merge nums2 to nums1 directly.
__________________________________________________________________________________________________

Brute Force using build-in sorting approach:

1. Add the elements of nums2 directly to nums1.
2. Then finally sort the nums1 and return as output

The cost of sorting a list of length n will be x log x . Here we are sorting a list of length (n+m) so , the TC will be O((n+m)log(n+m))
SC will be O(n) as the sorting approach will take n space.

def merge(self, nums1, m, nums2, n):
        for i in range(n):
            nums1[i+m] = nums2[i]
        return nums1.sort()
___________________________________________________________________________________________________

Optimized solution using three pointers:

1. Initialize three pointers p1 , p2 and p3. p1 will be pointing to the last non-zero element of nums1, p2 pointing to last non zero element of nums2 and 
   p3 pointing to the last element of nums1
2. Now for every iteration , check whether p1 and p2 is >= 0 .
3. If yes , check if the number at p1 is greater than p2 and decrement p1 or else decrement p2
4. Finally , if we ran out of values in nums1 , add the remaining values of nums2 to the beginning of nums1

TC is O(n) and SC is O(1)

def merge(self, nums1, m, nums2, n):
        p1 = m-1
        p2 = n-1
        p3 = m+n-1

        while p1>=0 and p2>=0:
            if nums1[p1] > nums2[p2]:
                nums1[p3] = nums1[p1]
                p1 -= 1
            else:
                nums1[p3] = nums2[p2]
                p2 -= 1
            p3 -= 1
        
        while p2 >= 0:
            nums1[p2] = nums2[p2]
            p2 -= 1
______________________________________________________________________________________________________________
