Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Input: nums = [1,2,3,1]
Output: true

Input: nums = [1,2,3,4]
Output: false

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
_______________________________________________________________________

Approach 1: Brute force

1. Simply do the linear search - compare a number with every other element in the array to check if it is same.
2. Else return False if the numbers are distinct

TC will be O(n^2) where n is the length of array and for using nested for loop. In worst case, we need to check n(n-1)/2 interger pairs.
SC will be O(1) as no extra space is used.

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        
        n = len(nums)
        for i in range(n-1):
            for j in range(n-1):
                if nums[i] == nums[j]:
                    return True
        return False
_______________________________________________________________________________________________________

Approach 2: Two nested for loop in brute force can be a bit optimized by using sorting

1. First sort the given input array so that the consecutive numbers appears together , this will enable us to find the duplicates easily.

TC will be O(n log n) since we are using sorting
SC will be O(1) with no extra space.

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        
        n = len(nums)
        nums.sort()
        for i in range(n-1):
            if nums[i] == nums[i+1]:
                return True
        return False
_____________________________________________________________________________________________________________

Approach 3: Using the Hashset

1. Create a hashset to store the nums array. Here , hashset will store only the unique elements so duplicates will be removed automatically.
2. Check if len(nums) is equal to len(set(nums)) , so that if the length mismatches then we can assume the duplicates existed and it has been removed.
3. So return True in that case or else return False if the length are same.

TC will be linear time O(n)
SC will be O(1)

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        hashSet = len(set(nums))
        if len(nums) != hashSet:
            return True
        return False
___________________________________________________________________________________________________________

Approach 4: Using hashmap/dictionary

1. Create a dictionary to store elements and its occurances.
2. For every number in nums , check if i exist in dictionary , if exists then its a duplicate , return True
3. Or else it is a new element , so initialize the count to 1

TC will be linear time O(n)
SC will be O(1)

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        
        dict = {}
        for i in nums:
            if i in dict:
                return True
            else:
                dict[i] = 1
        return False
 _____________________________________________________________________________________


